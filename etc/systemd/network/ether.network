# use resolvconf can add additional dns as follows:

#sudo apt-get install resolvconf
#sudo vim /etc/resolvconf/resolv.conf.d/head
#nameserver 8.8.8.8
#nameserver 8.8.4.4
#sudo resolvconf -u


# 采用 networkmanager | systemd-networkd  + systemd-resolved 的方法。

# if dont want the /etc/resolv.conf be  OVERWRITTEN:
# but this method is more cubersome and will block the operation of systemd-resolved/resolvconf
# on updating /etc/resolv.conf, so not use it.
# sudo chattr +i /etc/resolv.conf 

# git clone 测试：
# git clone https://github.com/torvalds/linux.git linux.git
# 速度受制与两方面：
# 1- /etc/resolv.conf 中的dns
# 2- git config --global -e 所设定的代理。

# for more info:
# man systemd.network

# https://wiki.archlinux.org/index.php/Systemd-networkd_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)
#http://www.linuxfromscratch.org/lfs/view/8.0-systemd/chapter07/network.html
# https://forum.manjaro.org/t/howto-getting-rid-of-networkmanager-on-desktop-computers-alternatives/58183
#systemd-networkd

#systemctl stop NetworkManager
# use this config file, then
#systemctl start systemd-networkd

[Match]
Name=en* 
# for wired network it's most likely eno1, see output of ip link show to get the name)
[Network]
# Enables DHCPv4 and/or DHCPv6 client support. Accepts "yes", "no",
#           "ipv4", or "ipv6". Defaults to "no".
DHCP=ipv4 

#       Address=
#           A static IPv4 or IPv6 address and its prefix length, separated by a
#           "/" character. Specify this key more than once to configure several
#           addresses. The format of the address must be as described in
#           inet_pton(3). This is a short-hand for an [Address] section only
#           containing an Address key (see below). This option may be specified
#           more than once.

#           If the specified address is "0.0.0.0" (for IPv4) or "::" (for
#           IPv6), a new address range of the requested size is automatically
#           allocated from a system-wide pool of unused ranges. Note that the
#           prefix length must be equal or larger than 8 for IPv4, and 64 for
#           IPv6. The allocated range is checked against all current network
#           interfaces and all known network configuration files to avoid
#           address range conflicts. The default system-wide pool consists of
#           192.168.0.0/16, 172.16.0.0/12 and 10.0.0.0/8 for IPv4, and fd00::/8
#           for IPv6. This functionality is useful to manage a large number of
#           dynamically created network interfaces with the same network
#           configuration and automatic address range assignment.

#       Gateway=
#           The gateway address, which must be in the format described in
#           inet_pton(3). This is a short-hand for a [Route] section only
#           containing a Gateway key. This option may be specified more than
#           once.



#Address=192.168.1.2/24
#Gateway=192.168.1.1

#       DNS=
#           A DNS server address, which must be in the format described in
#           inet_pton(3). This option may be specified more than once. This
#           setting is read by systemd-resolved.service(8).


# in this way, the first abvailable dns will be used.
# just as the /etc/resolvconf/resolv.conf.d/head based method, which will update 
#  /etc/resolv.conf 
# then the /etc/resolv.conf will invoke all of the corresponds dns .


# So,  resolvconf is not needed while using systemd-resolved

# use the following file to set the stub resolver is ineffective
# than only depending on  systemd-resolved for this type of job:
#etc/resolvconf/resolv.conf.d/head

DNS=127.0.0.1




# office
DNS=172.16.0.1
# home
DNS=192.168.1.1


# disable the default option for this:
[DHCP]
#       The "[DHCP]" section configures the DHCPv4 and DHCP6 client, if it is
#       enabled with the DHCP= setting described above:

       UseDNS=false
#           When true (the default), the DNS servers received from the DHCP
#           server will be used and take precedence over any statically
#           configured ones.

#           This corresponds to the nameserver option in resolv.conf(5).








#systemd-resolved

#First backup the existing /etc/resolv.conf:
#sudo mv /etc/resolv.conf /etc/resolv.conf.backup
#Now create a symlink to the systemd-resolved stub file:
#sudo ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf

#Start systemd-resolved with
# use restart if it already started:

#systemctl start systemd-resolved  

#and check its status with

#resolvectl status
